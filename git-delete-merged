#!/usr/bin/env bash
set -uo pipefail

# This script deletes merged branches

# operate in dryrun mode
dry_run=1

##  Usage: @script.name [--apply] <[--local] | --remote <remote>> [--branches-to-skip <branches to skip>]
##
##  Example to delete all branches on GitHub matching 'patch-':
##          git-delete-merged --apply --remote github --match patch-
##
##  Options:
##      -d, --appl              Execute the plan.
##      -l, --local             Operate on local branches
##      --remote=my-remote      Operate on remote branches on the remote repo
##      --skip=branches         The list of branches to skip. Default is "master,develop"
##      --match=<regex>         Only delete branch names matching <regex>
##      --merge-master=branch   Branch to use as the master when deciding if a branch has been merged. Default 'origin/master'
##
##  By default, "master" and "develop" are skipped
##  Specifying x-delete-tool.protected-branches in your git config, or
##  listing them on the command line with commas will override this
##
##  Likewise, you can store a permanent override for what constitutes
##  the main branch by setting the x-delete-tool.merge-master property
##  Example:
##  git config --add x-delete-tool.merge-branch origin/develop

# general helper
ferr() {
    echo "$*"
    exit 1
}

echo_err() {
    echo "$*" 1>&2
}

# script specific helper
usage(){
    echo "$0 [--apply] (--local|--remote <remote_name>) --skip <branches,to,skip> --into <branch (default:master)>"
    exit 1
}

parse_options() {
    arg_apply=false
    arg_local=0
    arg_remote=0
    arg_remote_name=""
    arg_skip=""
    arg_match=""
    arg_ignore="no valid branch name"
    arg_into=""

    while (($# > 0)) ; do
        case "$1" in
            --apply)
                arg_apply=true
            ;;
            --local)
                arg_local=1
            ;;
            --remote)
                arg_remote=1
                shift
                arg_remote_name="${1:-}"
            ;;
            --skip)
                shift
                arg_skip=$1
            ;;
            --into)
                shift
                arg_into=$1
            ;;
            --match)
                shift
                arg_match="$1"
            ;;
            --ignore)
                shift
                arg_ignore="$1"
            ;;
            --test)
                unit_test=true
                arg_local=1
                arg_remote=0
            ;;
            *)
                echo "invalid argument: '$1'"
                usage
            ;;
            esac
        shift
    done

}

validate_config() {
    dry_run=true
    if ! (( arg_remote ^ arg_local )); then
        echo "ERROR: you need to specify '--remote' or '--local'"
        usage
    fi

    if (( arg_local == 1 )); then
        arg_local=true
    else
        arg_local=false
    fi

    if (( arg_remote == 1 )); then
        arg_remote=true
        if [[ -z $arg_remote_name ]]; then
            echo "you did not supply a remote name"
            usage
        fi
    else
        arg_remote=false
    fi

    if $arg_apply; then
        dry_run=false
    fi
}

show_config() {
    echo "######## config - args ########"
    echo
    echo "apply:        $arg_apply"
    echo "local:        $arg_local"
    echo "remote:       $arg_remote"
    echo "remote name:  $arg_remote_name"
    echo "into:         $arg_into"
    echo "skip:         $arg_skip"
    echo "match:        $arg_match"
    echo "ignore:       $arg_ignore"
    echo
    echo "###### config - inferred ######"
    # I did the inversion because --dry should be the default behavior
    echo "dry run:    $dry_run"
    echo "upstream:   $upstream"
    echo "current:    $current"
    echo "into:       $into_branch"
    echo "skip re:    $skipped_re"
    echo
    echo
}


get_branches_to_skip(){
    local override="${1:-}"
    local default='master,main,develop'
    local setting="$(git config --get --default $default x-delete-tool.protected-branches)"

    # command line args trumps git config
    if [[ -n $override ]]; then
        echo $override
        return
    fi
    echo $setting
}

update_skipped() {
    skipped_branches="$(get_branches_to_skip $arg_skip)"
    echo "$skipped_branches"
    skipped_re="$(sed -E -e 's/,/|/g' -e 's/([^\|]+)/^\1$/g' <<<"$skipped_branches")"
}


merge_branch(){
    local default='origin/master'
    local setting="$(git config --default $default --get x-delete-tool.merge-branch)"

    # command line args trumps git config
    if [[ -n $arg_into ]]; then
        echo $arg_into
        return
    fi

    echo $setting
}

filter_branches(){
    grep -v -E "$skipped_re"    | # filter skipped branches
        grep -E "${arg_match}"  | # just keep lines matching $arg_match - if unset, it matches all
        grep -v -E "${arg_ignore}"    # just keep lines matching $arg_match - if unset, it matches all
}

main(){
    local no_branches_msg="No branches to delete"
    local delete_branches_msg="Deleting the following branches"

    dry_run=true

    if [[ -v DEBUG ]]; then
        PS4='$LINENO: '
        set -x
    fi

    git status > /dev/null || ferr "failed to run git status - make sure you are in a git repository"

    upstream=$(git branch  -avv | sed -E -n -e '/\*/s/\*\s+\S+\s+\S+\s+\[(\S+)\/(\S+)(: .*)?\].*/\1\/\2/p')
    current=$(git branch -a | sed -n '/^*/s/^* //p')

    parse_options "$@"
    validate_config

    update_skipped
    into_branch=$(merge_branch)

    show_config
    unittest

    if $arg_local; then
        branches_unfiltered=$(
            git branch --merged $into_branch |  # show local, merged branches
            sed -E -n 's/  (.*)/\1/p' | # remove first two spaces
            egrep -v "$current"
        )


        branches=$(filter_branches <<< "$branches_unfiltered")  # remove skipped and filter on matches

    else
        # in case we should have a situation where upstream cannot be decided (maybe local branch?)
        # we need to set upstream to a default non-matching value when filtering upstream out
        upstream=${upstream:-xxxxxxxxxxxxxxx}
        branches_unfiltered=$(
            git branch -r --merged  $into_branch |  # show remote merged branches
                grep "  $arg_remote_name" |  # just keep lines with remote
                egrep -v "$upstream"      |  # it's usually an error to remove the branch you are on   '
                egrep -v "$into_branch"   |  # it's usually an error to remove the main branch
                egrep -v "HEAD ->"        |  # remove irrelevant noise
                sed -E -n 's/  \w*\/(.*)/\1/p' # remove the remote/ bit
        )

        no_branches_msg="${no_branches_msg} on ${arg_remote_name}"
        delete_branches_msg="${delete_branches_msg} on ${arg_remote_name}"
    fi

    if [[ -v DEBUG ]]; then
        echo "branches unfiltered: --->"
        echo "$branches_unfiltered"
        echo "branches unfiltered: <---"
    fi

    branches=$(filter_branches <<< "$branches_unfiltered")  # remove skipped and filter on matches

    if [[ -z $branches ]];then
        echo $no_branches_msg
        exit 1
    fi

    if $dry_run; then
        echo "NOT DELETING any branches. Pass --apply to go through with action."
        echo
        echo "Would have deleted the following branches:"
        echo "$branches"
        echo
        echo "Would have skipped these branches: "
        echo "$skipped_branches"
    else
        echo "$delete_branches_msg"
        echo "$branches"
        echo
        echo "Pausing for 2 seconds ... Press Ctrl-C to quit"
        sleep 2
        if $arg_local; then
            git branch -d $branches
        else
            git push --no-verify --delete $arg_remote_name $branches
        fi
    fi
}


unittest() {
    if [[ -v unit_test ]]; then
        verify(){
            if [[ $? = 0 ]];then
                echo OK
            else
                echo fail && exit 1
            fi
        }
        title(){ printf "    %-20s: " "$1"; }

        echo '### TEST: filter_branches() ###'

        title "filter test1"
        arg_skip="foo,bar,p1" branches="b1\nfoo\nbar\np1"
        update_skipped > /dev/null
        [[ $(/bin/echo -e "$branches" | filter_branches) == "b1" ]]
        verify

        title "filter test2"
        arg_skip="foo-bar,p1" branches="b1\nfoo-bar\np1"
        update_skipped > /dev/null
        [[ $(/bin/echo -e "$branches" | filter_branches) == "b1" ]]
        verify

        title "filter test3"
        arg_skip="foo-bar,p1" branches="b1\nfoo-bar\np1"
        update_skipped > /dev/null
        [[ $(/bin/echo -e "$branches" | filter_branches) == "b1" ]]
        verify

        printf '\n%s\n' '### TEST - skipped() ###'

        title "verify defaults"
        [[ $(get_branches_to_skip) == "master,main,develop" ]]
        verify

        title "verify override"
        [[ $(get_branches_to_skip override1) == "override1" ]]
        verify

        exit # needs to be present to just do this test
    fi
}

main "$@"

# vim: set ft=sh
